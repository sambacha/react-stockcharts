{"version":3,"sources":["../../../src/lib/interactive/Shape.js"],"names":["Shape","handleDraw","bind","handleDrag","handleDragComplete","saveNodeType","getSelectionState","nodes","state","index","position","otherProps","setState","override","moreProps","shapes","props","newTextList","map","each","idx","selected","onDragComplete","e","enabled","xScale","mouseXY","mouseX","mouseY","yScale","chartConfig","xAccessor","currentItem","xyValue","invert","xylValue","defaultShape","onChoosePosition","figure","newShape","degrees","width","height","edgeAngleTop","edgeAngleBottom","edgeRight","edgeLeft","newLabels","d","hoverText","hoverTextWithDefault","defaultProps","shape","fill","stroke","appearance","noop","getMouseCanvas","React","Component","propTypes","PropTypes","bool","isRequired","snapTo","func","shouldDisableSnap","onStart","onComplete","onSelect","onDoubleClick","currentPositionStroke","string","currentPositionStrokeWidth","number","currentPositionstrokeOpacity","currentPositionRadius","object","array","edgeStrokeWidth","edgeFill","edgeStroke","button","shiftKey","HoverTextNearMouse","enable","bgHeight","bgWidth","text","selectedText","r"],"mappings":";;;;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;AAKA;;;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;IAEMA,K;;;AACL,kBAAc;AAAA;;AAAA;;AAEb,QAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AACA,QAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBD,IAAhB,OAAlB;AACA,QAAKE,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBF,IAAxB,OAA1B;AACA,QAAKG,YAAL,GAAoBA,qBAAaH,IAAb,OAApB;AACA,QAAKI,iBAAL,GAAyB,uCAA0B,QAA1B,EAAoCJ,IAApC,OAAzB;;AAEA,QAAKK,KAAL,GAAa,EAAb;AACA,QAAKC,KAAL,GAAa,EAAb;AATa;AAUb;;;;6BACUC,K,EAAOC,Q,EAAUC,U,EAAY;AACvC,QAAKC,QAAL,CAAc;AACbC,2BACIF,UADJ;AAECF,iBAFD;AAGCC;AAHD;AADa,IAAd;AAOA;;;qCAEkBI,S,EAAW;AAAA;;AAAA,OACrBD,QADqB,GACR,KAAKL,KADG,CACrBK,QADqB;;AAE7B,OAAI,sBAAUA,QAAV,CAAJ,EAAyB;AAAA,QAChBE,MADgB,GACL,KAAKC,KADA,CAChBD,MADgB;;AAExB,QAAME,cAAcF,OAAOG,GAAP,CAAW,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC7C,SAAMC,WAAWD,QAAQP,SAASJ,KAAlC;AACA,YAAOY,wBAEFF,IAFE,EAGFN,QAHE;AAILH,gBAAUG,SAASH,QAJd;AAKLW,gBAAU;AALL,uBAQFF,IARE;AASLE,gBAAU;AATL,OAAP;AAWA,KAbmB,CAApB;AAcA,SAAKT,QAAL,CACC;AACCC,eAAU;AADX,KADD,EAIC,YAAM;AACL,YAAKG,KAAL,CAAWM,cAAX,CAA0BL,WAA1B,EAAuCH,SAAvC;AACA,KANF;AAQA;AACD;;;6BAEUA,S,EAAWS,C,EAAG;AAAA,gBACI,KAAKP,KADT;AAAA,OAChBQ,OADgB,UAChBA,OADgB;AAAA,OACPT,MADO,UACPA,MADO;;AAAA,OAGvBU,MAHuB,GAQpBX,SARoB,CAGvBW,MAHuB;AAAA,2CAQpBX,SARoB,CAIvBY,OAJuB;AAAA,OAIbC,MAJa;AAAA,OAILC,MAJK;AAAA,OAKRC,MALQ,GAQpBf,SARoB,CAKvBgB,WALuB,CAKRD,MALQ;AAAA,OAMvBE,SANuB,GAQpBjB,SARoB,CAMvBiB,SANuB;AAAA,OAOvBC,WAPuB,GAQpBlB,SARoB,CAOvBkB,WAPuB;;AAUxB,OAAMC,UAAU,CAACF,UAAUC,WAAV,CAAD,EAAyBH,OAAOK,MAAP,CAAcN,MAAd,CAAzB,CAAhB;;AAEA,OAAMO,WAAW,EAAjB;;AAEA,OAAIX,OAAJ,EAAa;AAAA,kBACuC,KAAKR,KAD5C;AAAA,QACJoB,YADI,WACJA,YADI;AAAA,QACUC,gBADV,WACUA,gBADV;AAAA,QAC4BC,MAD5B,WAC4BA,MAD5B;;;AAGZ,QAAM5B,WAAW,CAACuB,QAAQ,CAAR,CAAD,EAAaA,QAAQ,CAAR,CAAb,CAAjB;;AAEA,QAAMM,wBACFH,YADE;AAELf,eAAU,IAFL;AAGLiB,mBAHK;AAIL5B,uBAJK;AAKL8B,cAAS,CALJ;AAMLC,YAAO,EANF;AAOLC,aAAQ,EAPH;AAQLC,mBAAc,CAACV,QAAQ,CAAR,CAAD,EAAaA,QAAQ,CAAR,CAAb,CART;AASLW,sBAAiB,CAACX,QAAQ,CAAR,CAAD,EAAaA,QAAQ,CAAR,CAAb,CATZ;AAULY,gBAAW,CAACZ,QAAQ,CAAR,CAAD,EAAaA,QAAQ,CAAR,CAAb,CAVN;AAWLa,eAAU,CAACb,QAAQ,CAAR,CAAD,EAAaA,QAAQ,CAAR,CAAb;AAXL,MAAN;AAaA,QAAII,gBAAJ,EAAsB;AACrBA,sBAAiBE,QAAjB,EAA2BzB,SAA3B,EAAsCS,CAAtC;AACA;AACD,IArBD,MAqBO;AACN,QAAMwB,yCAAgBhC,OAAOG,GAAP,CAAW,UAAC8B,CAAD;AAAA,yBAAaA,CAAb;AAAA,KAAX,CAAhB,EAAN;AACA,SAAKhC,KAAL,CAAWM,cAAX,CAA0ByB,SAA1B,EAAqCjC,SAArC;AACA;AACD;;;2BAEQ;AAAA;;AAAA,iBACsB,KAAKE,KAD3B;AAAA,OACAiC,SADA,WACAA,SADA;AAAA,OACWlC,MADX,WACWA,MADX;AAAA,OAEAF,QAFA,GAEa,KAAKL,KAFlB,CAEAK,QAFA;;;AAIR,OAAMqC,oCACFlD,MAAMmD,YAAN,CAAmBF,SADjB,EAEFA,SAFE,CAAN;;AAKA,UACC;AAAA;AAAA;AACElC,WAAOG,GAAP,CAAW,UAACkC,KAAD,EAAQhC,GAAR;AAAA,YACX,8BAAC,mBAAD;AACC,WAAKA,GADN;AAEC,WAAK,OAAKf,YAAL,CAAkBe,GAAlB,CAFN;AAGC,aAAOA,GAHR;AAIC,YAAMgC,MAAMC,IAJb;AAKC,cAAQD,MAAME,MALf;AAMC,cAAQF,MAAMd,MANf;AAOC,gBAAU,kCACTzB,QADS,EAETO,GAFS,EAGT,UAHS,EAITgC,MAAM1C,QAJG,CAPX;AAaC,gBAAU0C,MAAM/B,QAbjB;AAcC,eAAS,CAdV;AAeC,eAAS,kCACRR,QADQ,EAERO,GAFQ,EAGR,SAHQ,EAIRgC,MAAMZ,OAJE,CAfV;AAqBC,aAAO,kCACN3B,QADM,EAENO,GAFM,EAGN,OAHM,EAINgC,MAAMX,KAJA,CArBR;AA2BC,cAAQ,kCACP5B,QADO,EAEPO,GAFO,EAGP,QAHO,EAIPgC,MAAMV,MAJC,CA3BT;AAiCC,oBAAc,kCACb7B,QADa,EAEbO,GAFa,EAGb,cAHa,EAIbgC,MAAMT,YAJO,CAjCf;AAuCC,uBAAiB,kCAChB9B,QADgB,EAEhBO,GAFgB,EAGhB,iBAHgB,EAIhBgC,MAAMR,eAJU,CAvClB;AA6CC,gBAAU,kCACT/B,QADS,EAETO,GAFS,EAGT,UAHS,EAITgC,MAAMN,QAJG,CA7CX;AAmDC,iBAAW,kCACVjC,QADU,EAEVO,GAFU,EAGV,WAHU,EAIVgC,MAAMP,SAJI;AAMX;AACA;AACA;AACA;AA5DD,QA6DC,uBAAsB,+BA7DvB;AA8DC,6BAAsB,+BA9DvB;AA+DC,cAAQ,OAAK1C,UA/Dd;AAgEC,sBAAgB,OAAKC,kBAhEtB;AAiEI,iBAAW8C;AAjEf,QAkEKE,MAAMG,UAlEX,EADW;AAAA,KAAX,CADF;AAuEC,kCAAC,+BAAD;AACC,cAAS,KAAKtD,UADf;AAEC,cAASuD,WAFV;AAGC,iBAAYA,WAHb;AAIC,mBAAcC,gCAJf;AAKC,aAAQ,CAAC,WAAD,EAAc,KAAd;AALT;AAvED,IADD;AAiFA;;;;EAtLkBC,gBAAMC,S;;AAyL1B3D,MAAM4D,SAAN,GAAkB;AACjBpC,UAASqC,oBAAUC,IAAV,CAAeC,UADP;AAEjBC,SAAQH,oBAAUI,IAFD;AAGjBC,oBAAmBL,oBAAUI,IAAV,CAAeF,UAHjB;;AAKjBI,UAASN,oBAAUI,IAAV,CAAeF,UALP;AAMjBK,aAAYP,oBAAUI,IAAV,CAAeF,UANV;AAOjBM,WAAUR,oBAAUI,IAPH;AAQjBK,gBAAeT,oBAAUI,IARR;;AAUjBM,wBAAuBV,oBAAUW,MAVhB;AAWjBC,6BAA4BZ,oBAAUa,MAXrB;AAYjBC,+BAA8Bd,oBAAUa,MAZvB;AAajBE,wBAAuBf,oBAAUa,MAbhB;;AAejBzB,YAAWY,oBAAUgB,MAAV,CAAiBd,UAfX;;AAiBjBhD,SAAQ8C,oBAAUiB,KAAV,CAAgBf,UAjBP;;AAmBjBR,aAAYM,oBAAUT,KAAV,CAAgB;AAC3BE,UAAQO,oBAAUW,MAAV,CAAiBT,UADE;AAE3BV,QAAMQ,oBAAUW,MAAV,CAAiBT,UAFI;AAG3BgB,mBAAiBlB,oBAAUa,MAAV,CAAiBX,UAHP;AAI3BiB,YAAUnB,oBAAUW,MAAV,CAAiBT,UAJA;AAK3BkB,cAAYpB,oBAAUW,MAAV,CAAiBT;AALF,EAAhB;AAnBK,CAAlB;;AA4BA/D,MAAMmD,YAAN,GAAqB;AACpBgB,UAASX,WADW;AAEpBY,aAAYZ,WAFQ;AAGpBa,WAAUb,WAHU;;AAKpBe,wBAAuB,SALH;AAMpBI,+BAA8B,CANV;AAOpBF,6BAA4B,CAPR;AAQpBG,wBAAuB,CARH;;AAUpBV,oBAAmB,2BAAC3C,CAAD;AAAA,SAAOA,EAAE2D,MAAF,KAAa,CAAb,IAAkB3D,EAAE4D,QAA3B;AAAA,EAVC;AAWpBlC,yBACImC,6BAAmBjC,YADvB;AAECkC,UAAQ,IAFT;AAGCC,YAAU,MAHX;AAICC,WAAS,MAJV;AAKCC,QAAM,wBALP;AAMCC,gBAAc;AANf,GAXoB;AAmBpB1E,SAAQ,EAnBY;;AAqBpBqB,eAAc;AACbmB,cAAY;AACXD,WAAQ,SADG;AAEXD,SAAM,SAFK;AAGX0B,oBAAiB,CAHN;AAIXC,aAAU,SAJC;AAKXC,eAAY,SALD;AAMXS,MAAG;AANQ;AADC;AArBM,CAArB;;kBAiCe1F,K","file":"Shape.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { isDefined, noop } from \"../utils\";\nimport {\n\tgetValueFromOverride,\n\tsaveNodeType,\n\tisHoverForInteractiveType,\n} from \"./utils\";\nimport GenericChartComponent from \"../GenericChartComponent\";\nimport { getMouseCanvas } from \"../GenericComponent\";\nimport HoverTextNearMouse from \"./components/HoverTextNearMouse\";\n\nimport EachShape from \"./wrapper/EachShape\";\n\nclass Shape extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.handleDraw = this.handleDraw.bind(this);\n\t\tthis.handleDrag = this.handleDrag.bind(this);\n\t\tthis.handleDragComplete = this.handleDragComplete.bind(this);\n\t\tthis.saveNodeType = saveNodeType.bind(this);\n\t\tthis.getSelectionState = isHoverForInteractiveType(\"shapes\").bind(this);\n\n\t\tthis.nodes = [];\n\t\tthis.state = {};\n\t}\n\thandleDrag(index, position, otherProps) {\n\t\tthis.setState({\n\t\t\toverride: {\n\t\t\t\t...otherProps,\n\t\t\t\tindex,\n\t\t\t\tposition,\n\t\t\t},\n\t\t});\n\t}\n\n\thandleDragComplete(moreProps) {\n\t\tconst { override } = this.state;\n\t\tif (isDefined(override)) {\n\t\t\tconst { shapes } = this.props;\n\t\t\tconst newTextList = shapes.map((each, idx) => {\n\t\t\t\tconst selected = idx === override.index;\n\t\t\t\treturn selected\n\t\t\t\t\t? {\n\t\t\t\t\t\t...each,\n\t\t\t\t\t\t...override,\n\t\t\t\t\t\tposition: override.position,\n\t\t\t\t\t\tselected: true,\n\t\t\t\t\t}\n\t\t\t\t\t: {\n\t\t\t\t\t\t...each,\n\t\t\t\t\t\tselected: false,\n\t\t\t\t\t};\n\t\t\t});\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\toverride: null,\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tthis.props.onDragComplete(newTextList, moreProps);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\thandleDraw(moreProps, e) {\n\t\tconst { enabled, shapes } = this.props;\n\t\tconst {\n\t\t\txScale,\n\t\t\tmouseXY: [mouseX, mouseY],\n\t\t\tchartConfig: { yScale },\n\t\t\txAccessor,\n\t\t\tcurrentItem,\n\t\t} = moreProps;\n\n\t\tconst xyValue = [xAccessor(currentItem), yScale.invert(mouseY)];\n\n\t\tconst xylValue = [];\n\n\t\tif (enabled) {\n\t\t\tconst { defaultShape, onChoosePosition, figure } = this.props;\n\n\t\t\tconst position = [xyValue[0], xyValue[1]];\n\n\t\t\tconst newShape = {\n\t\t\t\t...defaultShape,\n\t\t\t\tselected: true,\n\t\t\t\tfigure,\n\t\t\t\tposition,\n\t\t\t\tdegrees: 0,\n\t\t\t\twidth: 50,\n\t\t\t\theight: 50,\n\t\t\t\tedgeAngleTop: [xyValue[0], xyValue[1]],\n\t\t\t\tedgeAngleBottom: [xyValue[0], xyValue[1]],\n\t\t\t\tedgeRight: [xyValue[0], xyValue[1]],\n\t\t\t\tedgeLeft: [xyValue[0], xyValue[1]],\n\t\t\t};\n\t\t\tif (onChoosePosition) {\n\t\t\t\tonChoosePosition(newShape, moreProps, e);\n\t\t\t}\n\t\t} else {\n\t\t\tconst newLabels = [...shapes.map((d) => ({ ...d }))];\n\t\t\tthis.props.onDragComplete(newLabels, moreProps);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { hoverText, shapes } = this.props;\n\t\tconst { override } = this.state;\n\n\t\tconst hoverTextWithDefault = {\n\t\t\t...Shape.defaultProps.hoverText,\n\t\t\t...hoverText\n\t\t};\n\n\t\treturn (\n\t\t\t<g>\n\t\t\t\t{shapes.map((shape, idx) => (\n\t\t\t\t\t<EachShape\n\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\tref={this.saveNodeType(idx)}\n\t\t\t\t\t\tindex={idx}\n\t\t\t\t\t\tfill={shape.fill}\n\t\t\t\t\t\tstroke={shape.stroke}\n\t\t\t\t\t\tfigure={shape.figure}\n\t\t\t\t\t\tposition={getValueFromOverride(\n\t\t\t\t\t\t\toverride,\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\"position\",\n\t\t\t\t\t\t\tshape.position\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tselected={shape.selected}\n\t\t\t\t\t\topacity={1}\n\t\t\t\t\t\tdegrees={getValueFromOverride(\n\t\t\t\t\t\t\toverride,\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\"degrees\",\n\t\t\t\t\t\t\tshape.degrees\n\t\t\t\t\t\t)}\n\t\t\t\t\t\twidth={getValueFromOverride(\n\t\t\t\t\t\t\toverride,\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\"width\",\n\t\t\t\t\t\t\tshape.width\n\t\t\t\t\t\t)}\n\t\t\t\t\t\theight={getValueFromOverride(\n\t\t\t\t\t\t\toverride,\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\"height\",\n\t\t\t\t\t\t\tshape.height\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tedgeAngleTop={getValueFromOverride(\n\t\t\t\t\t\t\toverride,\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\"edgeAngleTop\",\n\t\t\t\t\t\t\tshape.edgeAngleTop\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tedgeAngleBottom={getValueFromOverride(\n\t\t\t\t\t\t\toverride,\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\"edgeAngleBottom\",\n\t\t\t\t\t\t\tshape.edgeAngleBottom\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tedgeLeft={getValueFromOverride(\n\t\t\t\t\t\t\toverride,\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\"edgeLeft\",\n\t\t\t\t\t\t\tshape.edgeLeft\n\t\t\t\t\t\t)}\n\t\t\t\t\t\tedgeRight={getValueFromOverride(\n\t\t\t\t\t\t\toverride,\n\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\"edgeRight\",\n\t\t\t\t\t\t\tshape.edgeRight\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t// edgeAngleTop={shape.edgeAngleTop}\n\t\t\t\t\t\t// edgeAngleBottom={shape.edgeAngleBottom}\n\t\t\t\t\t\t// edgeLeft={shape.edgeLeft}\n\t\t\t\t\t\t// edgeRight={shape.edgeRight}\n\t\t\t\t\t\tedgeInteractiveCursor=\"react-stockcharts-move-cursor\"\n\t\t\t\t\t\tlineInteractiveCursor=\"react-stockcharts-move-cursor\"\n\t\t\t\t\t\tonDrag={this.handleDrag}\n\t\t\t\t\t\tonDragComplete={this.handleDragComplete}\n\t\t\t\t\t    hoverText={hoverTextWithDefault}\n\t\t\t\t\t\t{...shape.appearance}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t\t<GenericChartComponent\n\t\t\t\t\tonClick={this.handleDraw}\n\t\t\t\t\tsvgDraw={noop}\n\t\t\t\t\tcanvasDraw={noop}\n\t\t\t\t\tcanvasToDraw={getMouseCanvas}\n\t\t\t\t\tdrawOn={[\"mousemove\", \"pan\"]}\n\t\t\t\t/>\n\t\t\t</g>\n\t\t);\n\t}\n}\n\nShape.propTypes = {\n\tenabled: PropTypes.bool.isRequired,\n\tsnapTo: PropTypes.func,\n\tshouldDisableSnap: PropTypes.func.isRequired,\n\n\tonStart: PropTypes.func.isRequired,\n\tonComplete: PropTypes.func.isRequired,\n\tonSelect: PropTypes.func,\n\tonDoubleClick: PropTypes.func,\n\n\tcurrentPositionStroke: PropTypes.string,\n\tcurrentPositionStrokeWidth: PropTypes.number,\n\tcurrentPositionstrokeOpacity: PropTypes.number,\n\tcurrentPositionRadius: PropTypes.number,\n\n\thoverText: PropTypes.object.isRequired,\n\n\tshapes: PropTypes.array.isRequired,\n\n\tappearance: PropTypes.shape({\n\t\tstroke: PropTypes.string.isRequired,\n\t\tfill: PropTypes.string.isRequired,\n\t\tedgeStrokeWidth: PropTypes.number.isRequired,\n\t\tedgeFill: PropTypes.string.isRequired,\n\t\tedgeStroke: PropTypes.string.isRequired,\n\t}),\n};\n\nShape.defaultProps = {\n\tonStart: noop,\n\tonComplete: noop,\n\tonSelect: noop,\n\n\tcurrentPositionStroke: \"#000000\",\n\tcurrentPositionstrokeOpacity: 1,\n\tcurrentPositionStrokeWidth: 3,\n\tcurrentPositionRadius: 0,\n\n\tshouldDisableSnap: (e) => e.button === 2 || e.shiftKey,\n\thoverText: {\n\t\t...HoverTextNearMouse.defaultProps,\n\t\tenable: true,\n\t\tbgHeight: \"auto\",\n\t\tbgWidth: \"auto\",\n\t\ttext: \"Click to select object\",\n\t\tselectedText: \"\",\n\t},\n\tshapes: [],\n\n\tdefaultShape: {\n\t\tappearance: {\n\t\t\tstroke: \"#000000\",\n\t\t\tfill: \"#000000\",\n\t\t\tedgeStrokeWidth: 1,\n\t\t\tedgeFill: \"#FFFFFF\",\n\t\t\tedgeStroke: \"#000000\",\n\t\t\tr: 6,\n\t\t},\n\t},\n};\n\nexport default Shape;\n"]}