{"version":3,"sources":["../../../src/lib/interactive/LabelArrow.js"],"names":["LabelArrow","props","handleDraw","bind","handleDrag","handleDragComplete","terminate","saveNodeType","getSelectionState","getHoverInteractive","nodes","state","index","position","setState","override","moreProps","labelArrowList","newTextList","map","each","idx","selected","onDragComplete","e","enabled","type","mouseXY","mouseY","yScale","chartConfig","xAccessor","currentItem","xyValue","invert","onChoosePosition","newText","newLabels","d","hovering","arrow","isHover","defaultText","hoverText","defaultHoverText","defaultProps","appearance","toLowerCase","fill","width","noop","getMouseCanvas","Component","propTypes","PropTypes","func","isRequired","onSelect","oneOf","shape","number","open","string","close","object","array","bool","HoverTextNearMouse","enable","bgHeight","bgWidth","text","selectedText","contextTypes","subscribe","unsubscribe","generateSubscriptionId","chartId","oneOfType"],"mappings":"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","file":"LabelArrow.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { isDefined, noop } from \"../utils\";\n\nimport {\n\tgetValueFromOverride,\n\tterminate,\n\tsaveNodeType,\n\tisHoverForInteractiveType,\n} from \"./utils\";\nimport EachLabelArrow from \"./wrapper/EachLabelArrow\";\nimport HoverTextNearMouse from \"./components/HoverTextNearMouse\";\nimport GenericChartComponent from \"../GenericChartComponent\";\nimport { getMouseCanvas } from \"../GenericComponent\";\n\nclass LabelArrow extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.handleDraw = this.handleDraw.bind(this);\n\t\tthis.handleDrag = this.handleDrag.bind(this);\n\t\tthis.handleDragComplete = this.handleDragComplete.bind(this);\n\t\tthis.terminate = terminate.bind(this);\n\n\t\tthis.saveNodeType = saveNodeType.bind(this);\n\t\tthis.getSelectionState = isHoverForInteractiveType(\n\t\t\t\"labelArrowList\"\n\t\t).bind(this);\n\t\tthis.getHoverInteractive = this.getHoverInteractive.bind(this);\n\n\t\tthis.nodes = [];\n\t\tthis.state = {};\n\t}\n\thandleDrag(index, position) {\n\t\tthis.setState({\n\t\t\toverride: {\n\t\t\t\tindex,\n\t\t\t\tposition,\n\t\t\t},\n\t\t});\n\t}\n\thandleDragComplete(moreProps) {\n\t\tconst { override } = this.state;\n\t\tif (isDefined(override)) {\n\t\t\tconst { labelArrowList } = this.props;\n\t\t\tconst newTextList = labelArrowList.map((each, idx) => {\n\t\t\t\tconst selected = idx === override.index;\n\t\t\t\treturn selected\n\t\t\t\t\t? {\n\t\t\t\t\t\t...each,\n\t\t\t\t\t\tposition: override.position,\n\t\t\t\t\t\tselected: true,\n\t\t\t\t\t}\n\t\t\t\t\t: {\n\t\t\t\t\t\t...each,\n\t\t\t\t\t\tselected: false,\n\t\t\t\t\t};\n\t\t\t});\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\toverride: null,\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tthis.props.onDragComplete(newTextList, moreProps);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\thandleDraw(moreProps, e) {\n\t\tconst { enabled, type, labelArrowList } = this.props;\n\t\tconst {\n\t\t\tmouseXY: [, mouseY],\n\t\t\tchartConfig: { yScale },\n\t\t\txAccessor,\n\t\t\tcurrentItem,\n\t\t} = moreProps;\n\n\t\tconst xyValue = [xAccessor(currentItem), yScale.invert(mouseY)];\n\t\tif (enabled) {\n\t\t\tconst { onChoosePosition } = this.props;\n\n\t\t\tconst newText = {\n\t\t\t\ttype,\n\t\t\t\tposition: xyValue,\n\t\t\t};\n\t\t\tonChoosePosition(newText, moreProps, e);\n\t\t} else {\n\t\t\tconst newLabels = [\n\t\t\t\t...labelArrowList.map((d) => ({ ...d, selected: false })),\n\t\t\t];\n\t\t\tthis.props.onDragComplete(newLabels, moreProps);\n\t\t}\n\t}\n\tgetHoverInteractive(hovering, arrow) {\n\t\tarrow.hovering = hovering;\n\t\tconst { isHover } = this.props;\n\t\tisHover(hovering, arrow);\n\t}\n\n\trender() {\n\t\tconst { labelArrowList, defaultText, hoverText } = this.props;\n\t\tconst { override } = this.state;\n\n\t\treturn (\n\t\t\t<g>\n\t\t\t\t{labelArrowList.map((each, idx) => {\n\t\t\t\t\tconst defaultHoverText = LabelArrow.defaultProps.hoverText;\n\t\t\t\t\tconst props = {\n\t\t\t\t\t\t...defaultText,\n\t\t\t\t\t\t...each,\n\t\t\t\t\t\thoverText: {\n\t\t\t\t\t\t\t...defaultHoverText,\n\t\t\t\t\t\t\t...hoverText,\n\t\t\t\t\t\t\t...(each.hoverText || {}),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<EachLabelArrow\n\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\tref={this.saveNodeType(idx)}\n\t\t\t\t\t\t\tindex={idx}\n\t\t\t\t\t\t\tid={idx + each.position[0]}\n\t\t\t\t\t\t\t{...props}\n\t\t\t\t\t\t\tselected={each.selected}\n\t\t\t\t\t\t\tposition={getValueFromOverride(\n\t\t\t\t\t\t\t\toverride,\n\t\t\t\t\t\t\t\tidx,\n\t\t\t\t\t\t\t\t\"position\",\n\t\t\t\t\t\t\t\teach.position\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\ttype={each.type}\n\t\t\t\t\t\t\tfill={each.appearance[each.type.toLowerCase()].fill}\n\t\t\t\t\t\t\twidth={each.width}\n\t\t\t\t\t\t\tonDrag={this.handleDrag}\n\t\t\t\t\t\t\tonDragComplete={this.handleDragComplete}\n\t\t\t\t\t\t\tedgeInteractiveCursor=\"react-stockcharts-move-cursor\"\n\t\t\t\t\t\t\tgetHoverInteractive={hovering => this.getHoverInteractive(hovering, each)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t<GenericChartComponent\n\t\t\t\t\tonClick={this.handleDraw}\n\t\t\t\t\tsvgDraw={noop}\n\t\t\t\t\tcanvasDraw={noop}\n\t\t\t\t\tcanvasToDraw={getMouseCanvas}\n\t\t\t\t\tdrawOn={[\"mousemove\", \"pan\"]}\n\t\t\t\t/>\n                ;\n\t\t\t</g>\n\t\t);\n\t}\n}\n\nLabelArrow.propTypes = {\n\tonChoosePosition: PropTypes.func.isRequired,\n\tonDragComplete: PropTypes.func.isRequired,\n\tonSelect: PropTypes.func,\n\ttype: PropTypes.oneOf([\"OPEN\", \"CLOSE\"]).isRequired,\n\tappearance: PropTypes.shape({\n\t\twidth: PropTypes.number.isRequired,\n\t\topen: PropTypes.shape({\n\t\t\tfill: PropTypes.string.isRequired,\n\t\t}),\n\t\tclose: PropTypes.shape({\n\t\t\tfill: PropTypes.string.isRequired,\n\t\t}),\n\t}),\n\n\thoverText: PropTypes.object.isRequired,\n\tlabelArrowList: PropTypes.array.isRequired,\n\tenabled: PropTypes.bool.isRequired,\n};\n\nLabelArrow.defaultProps = {\n\tonChoosePosition: noop,\n\tonDragComplete: noop,\n\tonSelect: noop,\n\n\ttype: \"OPEN\",\n\n\tappearance: {\n\t\twidth: 40,\n\t\topen: {\n\t\t\tfill: \"green\",\n\t\t},\n\t\tclose: {\n\t\t\tfill: \"red\",\n\t\t},\n\t},\n\thoverText: {\n\t\t...HoverTextNearMouse.defaultProps,\n\t\tenable: true,\n\t\tbgHeight: \"auto\",\n\t\tbgWidth: \"auto\",\n\t\ttext: \"Click to select object\",\n\t\tselectedText: \"\",\n\t},\n\tlabelArrowList: [],\n};\n\nLabelArrow.contextTypes = {\n\tsubscribe: PropTypes.func.isRequired,\n\tunsubscribe: PropTypes.func.isRequired,\n\tgenerateSubscriptionId: PropTypes.func.isRequired,\n\tchartId: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n\t\t.isRequired,\n};\n\nexport default LabelArrow;\n"]}