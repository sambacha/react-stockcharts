{"version":3,"sources":["../../../src/lib/calculator/obv.js"],"names":["options","defaultOptions","source","close","d","volume","calculator","data","windowSize","obvAlgorithm","accumulator","prev","curr","obv","Math","round","abs","newData","undefinedLength","x","arguments","length"],"mappings":";;;;;;;;;;kBAOe,YAAW;;AAEzB,KAAIA,UAAUC,iCAAd;AACA,KAAIC,SAAS;AAAA,SAAM,EAAEC,OAAOC,EAAED,KAAX,EAAkBE,QAAQD,EAAEC,MAA5B,EAAN;AAAA,EAAb;;AAEA,UAASC,UAAT,CAAoBC,IAApB,EAA0B;AAAA,iBACFP,OADE;AAAA,MACjBQ,UADiB,YACjBA,UADiB;;;AAGzB,MAAMC,eAAe,4BACnBD,UADmB,CACRA,UADQ,EAEnBE,WAFmB,CAEP,gBAAkB;AAAA;AAAA,OAAhBC,IAAgB;AAAA,OAAVC,IAAU;;AAC9B,OAAIC,YAAJ;AACA,OAAID,KAAKT,KAAL,GAAaQ,KAAKR,KAAtB,EAA6B;AAC5BU,UAAMC,KAAKC,KAAL,CAAWJ,KAAKN,MAAL,GAAcO,KAAKP,MAA9B,EAAsC,CAAtC,CAAN;AACA,IAFD,MAEO,IAAIO,KAAKT,KAAL,GAAaQ,KAAKR,KAAtB,EAA6B;AACnCU,UAAMC,KAAKC,KAAL,CAAWJ,KAAKN,MAAL,GAAcO,KAAKP,MAA9B,EAAsC,CAAtC,CAAN;AACA,IAFM,MAEA;AACNQ,UAAMC,KAAKC,KAAL,CAAWJ,KAAKN,MAAhB,EAAwB,CAAxB,CAAN;AACA;;AAED,UAAOS,KAAKE,GAAL,CAASH,GAAT,CAAP;AACA,GAbmB,CAArB;;AAeA,MAAMI,UAAUR,aAAaF,IAAb,CAAhB;;AAEA,SAAOU,OAAP;AACA;AACDX,YAAWY,eAAX,GAA6B,YAAW;AAAA,kBAChBlB,OADgB;AAAA,MAC/BQ,UAD+B,aAC/BA,UAD+B;;AAEvC,SAAOA,aAAa,CAApB;AACA,EAHD;AAIAF,YAAWN,OAAX,GAAqB,UAASmB,CAAT,EAAY;AAChC,MAAI,CAACC,UAAUC,MAAf,EAAuB;AACtB,UAAOrB,OAAP;AACA;AACDA,yBAAeC,iCAAf,EAAkCkB,CAAlC;AACA,SAAOb,UAAP;AACA,EAND;;AAQAA,YAAWJ,MAAX,GAAoB,UAASiB,CAAT,EAAY;AAC/B,MAAI,CAACC,UAAUC,MAAf,EAAuB;AACtB,UAAOnB,MAAP;AACA;AACDA,WAASiB,CAAT;AACA,SAAOb,UAAP;AACA,EAND;;AAQA,QAAOA,UAAP;AACA,C;;AArDD;;AAEA;;AACA","file":"obv.js","sourcesContent":["\n\nimport { max, min, mean } from \"d3-array\";\n\nimport { OBV as defaultOptions } from \"./defaultOptionsForComputation\";\nimport { slidingWindow, last, current, mapValue } from \"../utils\";\n\nexport default function() {\n\n\tlet options = defaultOptions;\n\tlet source = d => ({ close: d.close, volume: d.volume });\n\n\tfunction calculator(data) {\n\t\tconst { windowSize } = options;\n\n\t\tconst obvAlgorithm = slidingWindow()\n\t\t\t.windowSize(windowSize)\n\t\t\t.accumulator(([prev, curr]) => {\n\t\t\t\tlet obv;\n\t\t\t\tif (curr.close > prev.close) {\n\t\t\t\t\tobv = Math.round(prev.volume - curr.volume, 2);\n\t\t\t\t} else if (curr.close < prev.close) {\n\t\t\t\t\tobv = Math.round(prev.volume - curr.volume, 2);\n\t\t\t\t} else {\n\t\t\t\t\tobv = Math.round(prev.volume, 2);\n\t\t\t\t}\n\n\t\t\t\treturn Math.abs(obv);\n\t\t\t});\n\n\t\tconst newData = obvAlgorithm(data);\n\n\t\treturn newData;\n\t}\n\tcalculator.undefinedLength = function() {\n\t\tconst { windowSize } = options;\n\t\treturn windowSize - 1;\n\t};\n\tcalculator.options = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn options;\n\t\t}\n\t\toptions = { ...defaultOptions, ...x };\n\t\treturn calculator;\n\t};\n\n\tcalculator.source = function(x) {\n\t\tif (!arguments.length) {\n\t\t\treturn source;\n\t\t}\n\t\tsource = x;\n\t\treturn calculator;\n\t};\n\n\treturn calculator;\n}\n"]}